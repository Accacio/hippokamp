#+title: 20. Dynamic Programming II: Text Justification, Blackjack - YouTube
#+roam_key: https://www.youtube.com/watch?v=ENyox7kNKeY
- tags :: [[file:20200709102805-optimization.org][Optimization]], [[file:20201217113115-dynamic_programming.org][Dynamic Programming]]
* 5 steps
1. Define _subproblems_ -> # subproblems
2. _guess_ (part of the solution) -> # choices for guesses
3. _relate_ subproblems -> time/subproblem similart to # choices
4. _recurse_ & memoize -> check subproblem recurrence is acyclic
5. Solve original problem

* Text justification
latex uses DP to solve problem
** definitions
- text = list of words
- badness(i,j) how bad to use words[i:j] as line
  - $\infty$ if don't fit
  - (pagewidth - totalwidth)^3
** solving
*** Subproblems:
_suffixes_ words[i:]
- # subproblems: n
*** _guess_:
where to start 2nd line
- # choices \leq n-1 = O(n)
*** Recurrence:
#+begin_src python
DP( i ) = min( DP( j ) + badness(i,j) for j in range(i+1,n+1))
#+end_src
- base case
DP( n ) = 0
*** Topological order:
i=n,n-1,...,0
total time= O(n^2)
*** Original prob:
DP(0)
** _Parent pointers_:
remember which guess was best
parent[i]=argmin(...) 
calculate argmin
